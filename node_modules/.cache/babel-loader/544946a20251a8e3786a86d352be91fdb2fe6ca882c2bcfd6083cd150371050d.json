{"ast":null,"code":"var _jsxFileName = \"/Users/anishsoni/Desktop/insight-ai/speech-interface/src/components/ui/imageGallery.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Card, CardContent } from './Card'; // Assuming these are styled components\n\n// const ImageGallery = ({ images, response, language, setLanguage }) => {\n//   const [isSpeaking, setIsSpeaking] = useState(false);\n//   const [transcript, setTranscript] = useState('');\n//   const [isListening, setIsListening] = useState(false);\n//   const [selectedLanguage, setSelectedLanguage] = useState(language);\n\n//   // Function to handle speech synthesis (Bot speaking)\n//   const speakResponse = (text) => {\n//     const speechSynthesis = window.speechSynthesis;\n//     const utterance = new SpeechSynthesisUtterance(text);\n//     utterance.lang = selectedLanguage; // Use selected language\n//     utterance.onstart = () => setIsSpeaking(true);\n//     utterance.onend = () => setIsSpeaking(false);\n//     speechSynthesis.speak(utterance);\n//   };\n\n//   // Function to handle speech recognition (Bot listening)\n//   const startListening = () => {\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n//     if (!SpeechRecognition) {\n//       alert(\"Speech Recognition API is not supported in this browser.\");\n//       return;\n//     }\n\n//     const recognition = new SpeechRecognition();\n//     recognition.lang = selectedLanguage; // Set language for recognition\n//     recognition.onstart = () => setIsListening(true);\n//     recognition.onend = () => setIsListening(false);\n//     recognition.onresult = (event) => {\n//       const text = event.results[0][0].transcript;\n//       setTranscript(text);\n//       handleLanguageSelection(text); // Update language if needed\n//     };\n//     recognition.start();\n//   };\n\n//   // Handle language selection from user's speech\n//   const handleLanguageSelection = (text) => {\n//     if (text.includes('English')) {\n//       setLanguage('en-US');\n//       setSelectedLanguage('en-US');\n//     } else if (text.includes('Hindi')) {\n//       setLanguage('hi-IN');\n//       setSelectedLanguage('hi-IN');\n//     }\n//     // Add more languages if needed\n//   };\n\n//   // Fetch images from backend if the images array is empty\n//   useEffect(() => {\n//     if (response) {\n//       speakResponse(response);\n//     }\n//     if (!images || images.length === 0) {\n//       fetchImages(); // Fetch images from backend\n//     }\n//   }, [response, images]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const res = await fetch('/api/images');\n//       const data = await res.json();\n//       if (data.images) {\n//         images = data.images;\n//       }\n//     } catch (error) {\n//       console.error(\"Failed to fetch images:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"space-y-6 px-4 sm:px-6\">\n//       <h2 className=\"text-2xl font-bold text-center\">Recent Captures</h2>\n\n//       {/* Display selected language */}\n//       <div className=\"mb-4 text-center\">\n//         <strong>Selected Language: </strong>{selectedLanguage}\n//       </div>\n\n//       {/* Display images */}\n//       <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n//         {images && images.length > 0 ? (\n//           images.map((image, index) => (\n//             <Card key={index}>\n//               <img\n//                 src={`/api/image/${image.filename}`}\n//                  // Fetch the image URL from the backend\n//                 alt={`Image captured at ${image.timestamp}`}\n//                 className=\"w-full h-40 sm:h-48 object-cover rounded-md\"\n//               />\n//               <CardContent>\n//                 <p><strong>Prompt:</strong> {image.prompt}</p>\n//                 <p><strong>Response:</strong> {image.response}</p>\n//                 <p><strong>Time:</strong> {image.timestamp}</p>\n//               </CardContent>\n//             </Card>\n//           ))\n//         ) : (\n//           <p>No images available.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageGallery;\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from './Card'; // Assuming these are styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageGallery = ({\n  images,\n  response,\n  language,\n  setLanguage\n}) => {\n  _s();\n  const [selectedLanguage, setSelectedLanguage] = useState(language);\n\n  // Function to handle speech synthesis (Bot speaking)\n  const speakResponse = text => {\n    const speechSynthesis = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = selectedLanguage; // Use selected language\n    speechSynthesis.speak(utterance);\n  };\n\n  // Handle language selection from user's speech\n  const handleLanguageSelection = text => {\n    if (text.includes('English')) {\n      setLanguage('en-US');\n      setSelectedLanguage('en-US');\n    } else if (text.includes('Hindi')) {\n      setLanguage('hi-IN');\n      setSelectedLanguage('hi-IN');\n    }\n    // Add more languages if needed\n  };\n\n  // Fetch images from backend if the images array is empty\n  const fetchImages = async () => {\n    try {\n      const res = await fetch('/api/images');\n      const data = await res.json();\n      if (data.images) {\n        images = data.images;\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch images:\", error);\n    }\n  };\n  useEffect(() => {\n    if (response) {\n      speakResponse(response);\n    }\n    if (!images || images.length === 0) {\n      fetchImages(); // Fetch images from backend\n    }\n  }, [response, images, fetchImages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6 px-4 sm:px-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-center\",\n      children: \"Recent Captures\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Selected Language: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), selectedLanguage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\",\n      children: images && images.length > 0 ? images.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `/api/image/${image.filename}`,\n          alt: `Captured at ${image.timestamp}`,\n          className: \"w-full h-40 sm:h-48 object-cover rounded-md\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Prompt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 20\n            }, this), \" \", image.prompt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Response:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 20\n            }, this), \" \", image.response]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 20\n            }, this), \" \", image.timestamp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageGallery, \"dI9F1CuDnKu4s5O//f6NcB/hvZU=\");\n_c = ImageGallery;\nexport default ImageGallery;\nvar _c;\n$RefreshReg$(_c, \"ImageGallery\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","jsxDEV","_jsxDEV","ImageGallery","images","response","language","setLanguage","_s","selectedLanguage","setSelectedLanguage","speakResponse","text","speechSynthesis","window","utterance","SpeechSynthesisUtterance","lang","speak","handleLanguageSelection","includes","fetchImages","res","fetch","data","json","error","console","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","image","index","src","filename","alt","timestamp","prompt","_c","$RefreshReg$"],"sources":["/Users/anishsoni/Desktop/insight-ai/speech-interface/src/components/ui/imageGallery.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Card, CardContent } from './Card'; // Assuming these are styled components\n\n// const ImageGallery = ({ images, response, language, setLanguage }) => {\n//   const [isSpeaking, setIsSpeaking] = useState(false);\n//   const [transcript, setTranscript] = useState('');\n//   const [isListening, setIsListening] = useState(false);\n//   const [selectedLanguage, setSelectedLanguage] = useState(language);\n\n//   // Function to handle speech synthesis (Bot speaking)\n//   const speakResponse = (text) => {\n//     const speechSynthesis = window.speechSynthesis;\n//     const utterance = new SpeechSynthesisUtterance(text);\n//     utterance.lang = selectedLanguage; // Use selected language\n//     utterance.onstart = () => setIsSpeaking(true);\n//     utterance.onend = () => setIsSpeaking(false);\n//     speechSynthesis.speak(utterance);\n//   };\n\n//   // Function to handle speech recognition (Bot listening)\n//   const startListening = () => {\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    \n//     if (!SpeechRecognition) {\n//       alert(\"Speech Recognition API is not supported in this browser.\");\n//       return;\n//     }\n  \n//     const recognition = new SpeechRecognition();\n//     recognition.lang = selectedLanguage; // Set language for recognition\n//     recognition.onstart = () => setIsListening(true);\n//     recognition.onend = () => setIsListening(false);\n//     recognition.onresult = (event) => {\n//       const text = event.results[0][0].transcript;\n//       setTranscript(text);\n//       handleLanguageSelection(text); // Update language if needed\n//     };\n//     recognition.start();\n//   };\n\n//   // Handle language selection from user's speech\n//   const handleLanguageSelection = (text) => {\n//     if (text.includes('English')) {\n//       setLanguage('en-US');\n//       setSelectedLanguage('en-US');\n//     } else if (text.includes('Hindi')) {\n//       setLanguage('hi-IN');\n//       setSelectedLanguage('hi-IN');\n//     }\n//     // Add more languages if needed\n//   };\n\n//   // Fetch images from backend if the images array is empty\n//   useEffect(() => {\n//     if (response) {\n//       speakResponse(response);\n//     }\n//     if (!images || images.length === 0) {\n//       fetchImages(); // Fetch images from backend\n//     }\n//   }, [response, images]);\n\n//   const fetchImages = async () => {\n//     try {\n//       const res = await fetch('/api/images');\n//       const data = await res.json();\n//       if (data.images) {\n//         images = data.images;\n//       }\n//     } catch (error) {\n//       console.error(\"Failed to fetch images:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"space-y-6 px-4 sm:px-6\">\n//       <h2 className=\"text-2xl font-bold text-center\">Recent Captures</h2>\n\n//       {/* Display selected language */}\n//       <div className=\"mb-4 text-center\">\n//         <strong>Selected Language: </strong>{selectedLanguage}\n//       </div>\n\n//       {/* Display images */}\n//       <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n//         {images && images.length > 0 ? (\n//           images.map((image, index) => (\n//             <Card key={index}>\n//               <img\n//                 src={`/api/image/${image.filename}`}\n//                  // Fetch the image URL from the backend\n//                 alt={`Image captured at ${image.timestamp}`}\n//                 className=\"w-full h-40 sm:h-48 object-cover rounded-md\"\n//               />\n//               <CardContent>\n//                 <p><strong>Prompt:</strong> {image.prompt}</p>\n//                 <p><strong>Response:</strong> {image.response}</p>\n//                 <p><strong>Time:</strong> {image.timestamp}</p>\n//               </CardContent>\n//             </Card>\n//           ))\n//         ) : (\n//           <p>No images available.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ImageGallery;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from './Card'; // Assuming these are styled components\n\nconst ImageGallery = ({ images, response, language, setLanguage }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState(language);\n\n  // Function to handle speech synthesis (Bot speaking)\n  const speakResponse = (text) => {\n    const speechSynthesis = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = selectedLanguage; // Use selected language\n    speechSynthesis.speak(utterance);\n  };\n\n  // Handle language selection from user's speech\n  const handleLanguageSelection = (text) => {\n    if (text.includes('English')) {\n      setLanguage('en-US');\n      setSelectedLanguage('en-US');\n    } else if (text.includes('Hindi')) {\n      setLanguage('hi-IN');\n      setSelectedLanguage('hi-IN');\n    }\n    // Add more languages if needed\n  };\n\n  // Fetch images from backend if the images array is empty\n  const fetchImages = async () => {\n    try {\n      const res = await fetch('/api/images');\n      const data = await res.json();\n      if (data.images) {\n        images = data.images;\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch images:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (response) {\n      speakResponse(response);\n    }\n    if (!images || images.length === 0) {\n      fetchImages(); // Fetch images from backend\n    }\n  }, [response, images, fetchImages]);\n\n  return (\n    <div className=\"space-y-6 px-4 sm:px-6\">\n      <h2 className=\"text-2xl font-bold text-center\">Recent Captures</h2>\n\n      {/* Display selected language */}\n      <div className=\"mb-4 text-center\">\n        <strong>Selected Language: </strong>{selectedLanguage}\n      </div>\n\n      {/* Display images */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n        {images && images.length > 0 ? (\n          images.map((image, index) => (\n            <Card key={index}>\n              <img\n                src={`/api/image/${image.filename}`}\n                alt={`Captured at ${image.timestamp}`}\n                className=\"w-full h-40 sm:h-48 object-cover rounded-md\"\n              />\n              <CardContent>\n                <p><strong>Prompt:</strong> {image.prompt}</p>\n                <p><strong>Response:</strong> {image.response}</p>\n                <p><strong>Time:</strong> {image.timestamp}</p>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <p>No images available.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ImageGallery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
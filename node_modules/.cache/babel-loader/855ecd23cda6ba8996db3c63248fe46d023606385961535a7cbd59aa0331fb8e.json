{"ast":null,"code":"var _jsxFileName = \"/Users/anishsoni/Desktop/speech-interface/src/components/ui/imageGallery.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageGallery = ({\n  images,\n  response,\n  language,\n  setLanguage\n}) => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(language);\n\n  // Function to handle speech synthesis (Bot speaking)\n  const speakResponse = text => {\n    const speechSynthesis = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = selectedLanguage; // Use selected language\n    utterance.onstart = () => setIsSpeaking(true);\n    utterance.onend = () => setIsSpeaking(false);\n    speechSynthesis.speak(utterance);\n  };\n\n  // Function to handle speech recognition (Bot listening)\n  const startListening = () => {\n    const recognition = new window.SpeechRecognition() || window.webkitSpeechRecognition;\n    recognition.lang = selectedLanguage; // Set language for recognition\n    recognition.onstart = () => setIsListening(true);\n    recognition.onend = () => setIsListening(false);\n    recognition.onresult = event => {\n      const text = event.results[0][0].transcript;\n      setTranscript(text);\n      handleLanguageSelection(text); // If needed, update language based on input\n    };\n    recognition.start();\n  };\n\n  // Handle language selection from user's speech\n  const handleLanguageSelection = text => {\n    // Logic to handle language change based on speech (if needed)\n    if (text.includes('English')) {\n      setLanguage('en-US');\n      setSelectedLanguage('en-US');\n    } else if (text.includes('Spanish')) {\n      setLanguage('es-ES');\n      setSelectedLanguage('es-ES');\n    }\n    // Add more languages if needed\n  };\n\n  // Start listening when the component mounts (for first-time voice input)\n  useEffect(() => {\n    if (response) {\n      speakResponse(response);\n    }\n  }, [response]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold\",\n      children: \"Recent Captures\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Selected Language: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), selectedLanguage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\",\n      children: images && images.length > 0 ? images.map(image => /*#__PURE__*/_jsxDEV(Card, {\n        className: \"overflow-hidden\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"p-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:5002/api/image/${image.filename}`,\n            alt: `Captured at ${image.timestamp}`,\n            className: \"w-full h-48 object-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mb-2\",\n              children: image.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium mb-2\",\n              children: [\"Prompt: \", image.prompt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-700\",\n              children: image.response\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `speaking-animation ${isSpeaking ? 'speaking' : ''}`,\n      children: isSpeaking ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDFA4 Bot is Speaking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Bot is silent.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 60\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startListening,\n        disabled: isListening,\n        children: isListening ? 'Listening...' : 'Start Listening'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Speech-to-Text: \", transcript]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageGallery, \"z2WmgLxj+Cvfz63lxSYY+OIoJiI=\");\n_c = ImageGallery;\nexport default ImageGallery;\nvar _c;\n$RefreshReg$(_c, \"ImageGallery\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","jsxDEV","_jsxDEV","ImageGallery","images","response","language","setLanguage","_s","isSpeaking","setIsSpeaking","transcript","setTranscript","isListening","setIsListening","selectedLanguage","setSelectedLanguage","speakResponse","text","speechSynthesis","window","utterance","SpeechSynthesisUtterance","lang","onstart","onend","speak","startListening","recognition","SpeechRecognition","webkitSpeechRecognition","onresult","event","results","handleLanguageSelection","start","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","image","src","filename","alt","timestamp","prompt","id","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/anishsoni/Desktop/speech-interface/src/components/ui/imageGallery.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from './Card';\n\nconst ImageGallery = ({ images, response, language, setLanguage }) => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(language);\n\n  // Function to handle speech synthesis (Bot speaking)\n  const speakResponse = (text) => {\n    const speechSynthesis = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = selectedLanguage; // Use selected language\n    utterance.onstart = () => setIsSpeaking(true);\n    utterance.onend = () => setIsSpeaking(false);\n    speechSynthesis.speak(utterance);\n  };\n\n  // Function to handle speech recognition (Bot listening)\n  const startListening = () => {\n    const recognition = new window.SpeechRecognition() || window.webkitSpeechRecognition;\n    recognition.lang = selectedLanguage; // Set language for recognition\n    recognition.onstart = () => setIsListening(true);\n    recognition.onend = () => setIsListening(false);\n    recognition.onresult = (event) => {\n      const text = event.results[0][0].transcript;\n      setTranscript(text);\n      handleLanguageSelection(text); // If needed, update language based on input\n    };\n    recognition.start();\n  };\n\n  // Handle language selection from user's speech\n  const handleLanguageSelection = (text) => {\n    // Logic to handle language change based on speech (if needed)\n    if (text.includes('English')) {\n      setLanguage('en-US');\n      setSelectedLanguage('en-US');\n    } else if (text.includes('Spanish')) {\n      setLanguage('es-ES');\n      setSelectedLanguage('es-ES');\n    }\n    // Add more languages if needed\n  };\n\n  // Start listening when the component mounts (for first-time voice input)\n  useEffect(() => {\n    if (response) {\n      speakResponse(response);\n    }\n  }, [response]);\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Recent Captures</h2>\n\n      {/* Display selected language */}\n      <div className=\"mb-4\">\n        <strong>Selected Language: </strong>{selectedLanguage}\n      </div>\n\n      {/* Display images */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {images && images.length > 0 ? (\n          images.map((image) => (\n            <Card key={image.id} className=\"overflow-hidden\">\n              <CardContent className=\"p-0\">\n                <img\n                  src={`http://localhost:5002/api/image/${image.filename}`}\n                  alt={`Captured at ${image.timestamp}`}\n                  className=\"w-full h-48 object-cover\"\n                />\n                <div className=\"p-4\">\n                  <div className=\"text-sm text-gray-500 mb-2\">\n                    {image.timestamp}\n                  </div>\n                  <p className=\"font-medium mb-2\">Prompt: {image.prompt}</p>\n                  <p className=\"text-sm text-gray-700\">{image.response}</p>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <p>No images available.</p>\n        )}\n      </div>\n\n      {/* Speech Animation */}\n      <div className={`speaking-animation ${isSpeaking ? 'speaking' : ''}`}>\n        {isSpeaking ? <span>🎤 Bot is Speaking...</span> : <span>Bot is silent.</span>}\n      </div>\n\n      {/* Speech-to-text (Real-time transcription) */}\n      <div className=\"mt-4\">\n        <button onClick={startListening} disabled={isListening}>\n          {isListening ? 'Listening...' : 'Start Listening'}\n        </button>\n        <p>Speech-to-Text: {transcript}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageGallery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}